package com.example.ecommerce.marketplace.application.supplier;

import com.example.ecommerce.marketplace.domain.supplier.Supplier;
import com.example.ecommerce.marketplace.domain.supplier.SupplierRepository;
import lombok.RequiredArgsConstructor;

/**
 * Use case for registering a new supplier in the marketplace.
 * Handles validation, uniqueness checks, and initial supplier setup.
 * Framework-agnostic, following Clean Architecture principles.
 */
@RequiredArgsConstructor
public class RegisterSupplierUseCase {

    private final SupplierRepository supplierRepository;

    /**
     * Executes the supplier registration use case.
     *
     * @param command the registration command containing supplier data
     * @return the result indicating success or failure with details
     */
    public RegisterSupplierResult execute(RegisterSupplierCommand command) {
        // 1. Validate required fields
        if (command.getName() == null || command.getName().trim().isEmpty()) {
            return RegisterSupplierResult.failure("Supplier name is required", "INVALID_NAME");
        }
        if (command.getEmail() == null || command.getEmail().trim().isEmpty()) {
            return RegisterSupplierResult.failure("Email is required", "INVALID_EMAIL");
        }
        if (command.getBusinessLicense() == null || command.getBusinessLicense().trim().isEmpty()) {
            return RegisterSupplierResult.failure("Business license is required", "INVALID_LICENSE");
        }

        // 2. Create supplier domain object
        Supplier supplier = new Supplier(
            null, // ID will be generated by repository
            command.getName(),
            command.getEmail(),
            command.getPhone(),
            command.getAddress(),
            command.getProfilePicture(),
            command.getProfileDescription(),
            command.getBusinessLicense(),
            null, // Initial rating is null
            false // Initial verified status is false
        );

        // 3. Validate email format using domain logic
        if (!supplier.validateEmail()) {
            return RegisterSupplierResult.failure("Invalid email format", "INVALID_EMAIL_FORMAT");
        }

        // 4. Validate business license format using domain logic
        if (!supplier.validateBusinessLicense()) {
            return RegisterSupplierResult.failure(
                "Invalid business license format (minimum 5 alphanumeric characters)",
                "INVALID_LICENSE_FORMAT"
            );
        }

        // 5. Check email uniqueness
        if (supplierRepository.existsByEmail(command.getEmail())) {
            return RegisterSupplierResult.failure("Email already registered", "EMAIL_EXISTS");
        }

        // 6. Check business license uniqueness
        if (supplierRepository.existsByBusinessLicense(command.getBusinessLicense())) {
            return RegisterSupplierResult.failure("Business license already registered", "LICENSE_EXISTS");
        }

        // 7. Save supplier
        Supplier savedSupplier = supplierRepository.save(supplier);

        // 8. Return success result
        return RegisterSupplierResult.success(savedSupplier.getId());
    }
}
