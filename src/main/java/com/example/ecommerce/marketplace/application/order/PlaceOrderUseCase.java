package com.example.ecommerce.marketplace.application.order;

import com.example.ecommerce.marketplace.domain.order.Order;
import com.example.ecommerce.marketplace.domain.order.OrderItem;
import com.example.ecommerce.marketplace.domain.order.OrderRepository;
import com.example.ecommerce.marketplace.domain.order.OrderStatus;
import lombok.RequiredArgsConstructor;

import java.util.ArrayList;
import java.util.List;

/**
 * Use case for placing a new order in the marketplace.
 * Handles validation, order creation, and initial order setup.
 * Framework-agnostic, following Clean Architecture principles.
 */
@RequiredArgsConstructor
public class PlaceOrderUseCase {

    private final OrderRepository orderRepository;

    /**
     * Executes the place order use case.
     *
     * @param command the order command containing order data
     * @return the result indicating success or failure with details
     */
    public PlaceOrderResult execute(PlaceOrderCommand command) {
        // 1. Validate required fields
        if (command.getOrderNumber() == null || command.getOrderNumber().trim().isEmpty()) {
            return PlaceOrderResult.failure("Order number is required", "INVALID_ORDER_NUMBER");
        }
        if (command.getRetailerId() == null) {
            return PlaceOrderResult.failure("Retailer ID is required", "INVALID_RETAILER_ID");
        }
        if (command.getSupplierId() == null) {
            return PlaceOrderResult.failure("Supplier ID is required", "INVALID_SUPPLIER_ID");
        }
        if (command.getShippingAddress() == null || command.getShippingAddress().trim().isEmpty()) {
            return PlaceOrderResult.failure("Shipping address is required", "INVALID_SHIPPING_ADDRESS");
        }
        if (command.getOrderItems() == null || command.getOrderItems().isEmpty()) {
            return PlaceOrderResult.failure("Order must contain at least one item", "EMPTY_ORDER_ITEMS");
        }

        // 2. Convert command items to domain items
        List<OrderItem> orderItems = new ArrayList<>();
        for (PlaceOrderCommand.OrderItemCommand itemCommand : command.getOrderItems()) {
            if (itemCommand.getProductId() == null) {
                return PlaceOrderResult.failure("Product ID is required for all items", "INVALID_PRODUCT_ID");
            }
            if (itemCommand.getQuantity() == null || itemCommand.getQuantity() <= 0) {
                return PlaceOrderResult.failure("Quantity must be greater than 0", "INVALID_QUANTITY");
            }
            if (itemCommand.getPrice() == null || itemCommand.getPrice() < 0) {
                return PlaceOrderResult.failure("Price cannot be negative", "INVALID_PRICE");
            }

            OrderItem orderItem = new OrderItem(
                null, // ID will be generated by repository
                itemCommand.getProductId(),
                itemCommand.getQuantity(),
                itemCommand.getPrice(),
                itemCommand.getProductName()
            );

            // Validate order item using domain logic
            if (!orderItem.validate()) {
                return PlaceOrderResult.failure("Invalid order item data", "INVALID_ORDER_ITEM");
            }

            orderItems.add(orderItem);
        }

        // 3. Create order domain object
        Order order = new Order(
            null, // ID will be generated by repository
            command.getOrderNumber(),
            command.getRetailerId(),
            command.getSupplierId(),
            orderItems,
            null, // Total will be calculated
            OrderStatus.PENDING, // Initial status is PENDING
            command.getShippingAddress(),
            command.getOrderDate(),
            null // Delivery date is null initially
        );

        // 4. Validate order number format using domain logic
        if (!order.validateOrderNumber()) {
            return PlaceOrderResult.failure(
                "Invalid order number format (minimum 5 alphanumeric characters)",
                "INVALID_ORDER_NUMBER_FORMAT"
            );
        }

        // 5. Validate minimum order quantity using domain logic
        if (!order.validateMinimumOrderQuantity()) {
            return PlaceOrderResult.failure(
                "Order does not meet minimum order quantity",
                "MINIMUM_QUANTITY_NOT_MET"
            );
        }

        // 6. Calculate total amount
        Double totalAmount = order.calculateTotalAmount();
        order.setTotalAmount(totalAmount);

        // 7. Check order number uniqueness
        if (orderRepository.existsByOrderNumber(command.getOrderNumber())) {
            return PlaceOrderResult.failure("Order number already exists", "ORDER_NUMBER_EXISTS");
        }

        // 8. Save order
        Order savedOrder = orderRepository.save(order);

        // 9. Return success result
        return PlaceOrderResult.success(savedOrder.getId());
    }
}
